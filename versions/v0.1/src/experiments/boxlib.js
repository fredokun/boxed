// Generated by CoffeeScript 1.9.0
(function() {
  var BoxLib,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  BoxLib = {};

  this.BoxLib = BoxLib;

  BoxLib.buildBox = function(kind, id) {
    switch (kind) {
      case "markdown":
        return new BoxLib.MarkdownBox(id);
      default:
        console.log("Unsupported box kind: " + kind);
        return null;
    }
  };

  BoxLib.BoxEd = (function() {
    function BoxEd() {
      this.boxes = [];
      this.boxMap = {};
      this.selectedBox = -1;
      this.defaultBoxKind = "markdown";
    }

    BoxEd.prototype.insertBox = function(position) {
      var box, boxId;
      console.log("Insert box: " + position);
      boxId = "box" + this.boxes.length;
      box = BoxLib.buildBox(this.defaultBoxKind, boxId);
      this.boxMap[boxId] = box;
      if (this.selectedBox === -1) {
        $("#boxed").append(box.buildHTML());
        box.installBox();
        this.selectedBox = this.boxes.length - 1;
        return this.boxes.push(box);
      } else {
        switch (position) {
          case "before":
            $(this.boxes[this.selectedBox].id).insertBefore(box.html());
            box.installBox();
            this.boxes.insertBefore(this.selectedBox);
            return this.selectBox(this.selectedBox);
          case "after":
            $(this.boxes[this.selectedBox].id).insertAfter(box.html());
            box.installBox();
            this.boxes.insertAfter(this.selectedBox);
            return this.selectBox(this.selectedBox + 1);
        }
      }
    };

    return BoxEd;

  })();


  /*
  #
   * Generic operations on boxes :
   * - commit   (start processing...)
   * - edit     (start editing...)
   * - hide/show
   * - edit metadata
   * - enable/disable   (editable or not)
   * - copy/cut/delete/clear
   * - insert after/insert before
   * - focus management
   * - selection management
   */

  BoxLib.Box = (function() {
    function Box(_at_kind, _at_id) {
      this.kind = _at_kind;
      this.id = _at_id;
    }

    Box.prototype.buildHTML = function() {
      var html;
      html = "<div id=\"" + this.id + "\" class=\"boxlib box " + this.kind + "-box\">\n     <div id=\"" + this.id + "-control\" class=\"boxlib box-control " + this.kind + "-box-control\">\n        <div id=\"" + this.id + "-control-buttons\" class=\"boxlib box-control-buttons\">\n          <button id=\"" + this.id + "-commit\" class=\"boxlib box-control-button box-control-button-commit\">\n          <span class=\"fa fa-eye\"></span>\n          </button>\n        <button id=\"" + this.id + "-menu\" class=\"boxlib box-control-button box-control-button-menu\">\n          <span class=\"fa fa-bars\"></span>\n        </button>\n        </div>\n     </div>\n     <div id=\"" + this.id + "-header\" class=\"boxlib box-header " + this.kind + "-box-header\"/>\n     <div id=\"" + this.id + "-content\" class=\"boxlib box-content " + this.kind + "-box-content\"/>\n     <div id=\"" + this.id + "-footer\" class=\"boxlib box-footer " + this.kind + "-box-footer\"/>\n</div>";
      return html;
    };

    Box.prototype.commit = function() {
      return console.log("Commit on abstract box (please report)");
    };

    return Box;

  })();


  /*
  #
   * Specific operations on Markdown boxes
   * - hide code/show view on commit
   * - live preview  (top/down  or left/right)
   */

  BoxLib.MarkdownBox = (function(_super) {
    __extends(MarkdownBox, _super);

    function MarkdownBox(id) {
      MarkdownBox.__super__.constructor.call(this, "markdown", id);
    }

    MarkdownBox.prototype.installBox = function() {
      $("#" + this.id + "-control-buttons").buttonset();
      $("#" + this.id + "-content").append("<textarea id=\"" + this.id + "-markdown-edit\" class=\"boxlib " + this.kind + "-box-edit\"/>");
      $("#" + this.id + "-content").append("<div id=\"" + this.id + "-markdown-view\" class=\"boxlib " + this.kind + "-box-view\"/>");
      $("#" + this.id + "-commit").one("click", (function(_this) {
        return function() {
          return _this.commit();
        };
      })(this));
      return this.codeMirror = CodeMirror.fromTextArea(document.getElementById(this.id + "-markdown-edit", {
        autofocus: false,
        mode: "text/markdown"
      }));
    };

    MarkdownBox.prototype.edit = function() {
      $("#" + this.id + "-control").removeClass("box-view-mode");
      $("#" + this.id + "-markdown-view").hide();
      $("#" + this.id + "-content .CodeMirror").show();
      $("#" + this.id + "-commit").visible();
      $("#" + this.id + "-menu").visible();
      return $("#" + this.id + "-commit").one("click", (function(_this) {
        return function() {
          return _this.commit();
        };
      })(this));
    };

    MarkdownBox.prototype.commit = function() {
      var html_output, md_input;
      md_input = this.codeMirror.getValue();
      html_output = marked(md_input);
      $("#" + this.id + "-markdown-view").empty();
      $("#" + this.id + "-markdown-view").append(html_output);
      $("#" + this.id + "-content .CodeMirror").hide();
      $("#" + this.id + "-markdown-view").show();
      $("#" + this.id).one("dblclick", (function(_this) {
        return function() {
          return _this.edit();
        };
      })(this));
      $("#" + this.id + "-commit").invisible();
      $("#" + this.id + "-menu").invisible();
      return $("#" + this.id + "-control").addClass("box-view-mode");
    };

    return MarkdownBox;

  })(BoxLib.Box);


  /*
  #
   * Specific operations on Section boxes
   * - hide code/show view on commit
   * - auto-toc   (update/show a computed table of contents)
  #
   */


  /*
  #
   * Specific operations on Live-coding boxes
   * - evaluate code/show outputs and last return value on commit
   * - show output index if evaluated
   * - live-coding  (top/down or left/right)
  #
   * Supported live-coding languages:
   * - javascript
   * - coffeescript
   */

}).call(this);
