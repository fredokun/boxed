// Generated by CoffeeScript 1.9.0
(function() {
  var __slice = [].slice;

  this.Array.prototype.insertBefore = function() {
    var index, items;
    index = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.splice.apply(this, [index, 0].concat(items));
    return this;
  };

  this.Array.prototype.insertAfter = function() {
    var index, items;
    index = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.splice.apply(this, [index + 1, 0].concat(items));
    return this;
  };

  jQuery.fn.visible = function() {
    return this.css('visibility', 'visible');
  };

  jQuery.fn.invisible = function() {
    return this.css('visibility', 'hidden');
  };

  jQuery.fn.visibilityToggle = function() {
    return this.css('visibility', function(i, visibility) {
      if (visibility === 'visible') {
        return 'hidden';
      } else {
        return 'visible';
      }
    });
  };

  (function($) {})(jQuery);

  $(function() {
    var BoxLib, boxedObj, closeMenus, editMenuSelect, fileMenuSelect, menuIds, toggleMenu;
    BoxLib = (typeof exports !== "undefined" && exports !== null ? exports : window).BoxLib;
    boxedObj = new BoxLib.BoxEd;
    $("#fileMenu").menu({
      select: function(event, ui) {
        return fileMenuSelect(boxedObj, ui.item[0].id);
      }
    }).hide();
    $("#editMenu").menu({
      select: function(event, ui) {
        return editMenuSelect(boxedObj, ui.item[0].id);
      }
    }).hide();
    $("#mainMenuBar").buttonset();
    $("#fileMenuButton").click(function() {
      return toggleMenu("#fileMenu");
    });
    $("#editMenuButton").click(function() {
      return toggleMenu("#editMenu");
    });
    menuIds = ["#fileMenu", "#editMenu"];
    toggleMenu = function(menuId) {
      var otherMenuId, _i, _len;
      for (_i = 0, _len = menuIds.length; _i < _len; _i++) {
        otherMenuId = menuIds[_i];
        if (otherMenuId !== menuId && $(otherMenuId).is(":visible")) {
          $(otherMenuId).hide();
        }
      }
      return $(menuId).toggle();
    };

    /* not required ?
     *          if $(menuId).is(":visible")
     *            $("#boxed *").prop("disabled", true)
     *          else
     *            $("#boxed *").prop("disabled", false)
     */
    closeMenus = function() {
      var menuId, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = menuIds.length; _i < _len; _i++) {
        menuId = menuIds[_i];
        _results.push($(menuId).hide());
      }
      return _results;
    };
    fileMenuSelect = function(boxedObj, item) {
      switch (item) {
        case "fileMenuNew":
          console.log("FileMenu: new  selected");
      }
      return closeMenus();
    };
    return editMenuSelect = function(boxedObj, item) {
      switch (item) {
        case "editMenuInsertBefore":
          boxedObj.insertBox("before");
          break;
        case "editMenuInsertAfter":
          boxedObj.insertBox("after");
      }
      return closeMenus();
    };
  });

}).call(this);
